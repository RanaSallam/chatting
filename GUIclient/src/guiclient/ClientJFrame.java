/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package guiclient;

/**
 *
 * @author Ronion
 */

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.*;
import java.io.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;

public class ClientJFrame extends javax.swing.JFrame {
    /**
     * Creates new form ClientJFrame
     */
    String username, serverIP = "127.0.0.1";
    int Port = 5000;
    Socket client;
    DataOutputStream dos;
    DataInputStream dis;
    Vector<String> onlineUsers = new Vector();
    Vector<String> offlineUsers = new Vector();
    Vector<String> Groups = new Vector();
    ServerSocket sc;
    Socket connect;
    Vector<String> ports = new Vector();
    int key =1;
   
    Boolean isConnected = false;
    
    public ClientJFrame() {
        initComponents();
        enroll.setEnabled(false);
        unEnroll.setEnabled(false);
        CreateGroupB.setEnabled(false);
        EnterGroup.setEnabled(false);
        ChatGroup.setEnabled(false);
        sendButton.setEnabled(false);
        offline.setEnabled(false);
        disconnectButton.setEnabled(false);
        EnterNameB.setEnabled(false);
        UsernameField.setEditable(false);
        GroupNametField.setEditable(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
  
  * regenerated by the Form Editor.
     */
    
    public class ListenThread extends Thread{
        // Listen only from the server
        public void run() {
            try {
                sc = new ServerSocket(0);
                dos = new DataOutputStream(client.getOutputStream());
                dis = new DataInputStream(client.getInputStream());
                
                // some changes happened to make user names unique
                onlineList.enable();
                OfflineList.enable();
                GroupsjList.enable();
                
                //dos.writeUTF("5555");
                //dos.writeUTF(username);
               
                 while (true) {
                    String respond;
                    respond = dis.readUTF();
                    if(respond.equals("1111"))
                    {
                        ONLINE();
                        OFFLINE();
                        GROUP();
                    } 
                   
                           
                    else if(respond.equals("3331"))//You are in the group chat now
                    {
                       // chatTextArea.setText(" ");
                        chatTextArea.append("You are in the group chat now \n");
                        enroll.setEnabled(false);
                        unEnroll.setEnabled(true);
                        ChatGroup.setEnabled(true);
                    }
                    else if(respond.equals("3330"))//Enter group button repond >> if not in the group >> You are not allowed to chat in this group
                    { chatTextArea.append("You are not allowed to chat in this group \n");
                        enroll.setEnabled(true);
                        unEnroll.setEnabled(false);
                    }
                    else if(respond.equals("3338"))//Chat group button respond >> if not in the group >>You are not allowed to chat in this group
                    { chatTextArea.append("You are not allowed to chat in this group \n");
                        enroll.setEnabled(false);
                        unEnroll.setEnabled(false);
                    }
                    else if(respond.equals("3337"))//respond from chat group button do nothing it only prevents printing the respond in else
                    {
                        
                    }
                    
                    // kicked off
                    else if (respond.equals("9696")){
                        chatTextArea.setText("you have been kicked OFF \n ");
                        Disconnecting();
                        connectButton.setEnabled(false);
                    }
                    // check name is right
                    else if (respond.equals("4444")) {
                        sendButton.setEnabled(true);
                        CreateGroupB.setEnabled(true);
                        enroll.setEnabled(false);
                        unEnroll.setEnabled(false);
                        offline.setEnabled(true);
                        EnterGroup.setEnabled(true);
                        EnterNameB.setEnabled(false);
                        UsernameField.setEditable(false); 
                        disconnectButton.setEnabled(true);
                        dos.writeUTF("1111");
                        dos.writeUTF(Integer.toString(sc.getLocalPort()));
   
                      }
                     // check name failed 
                    
                     else if (respond.equals("5555")){
                         // to change it later
                          chatTextArea.append("Enter another user name, this name has been taken \n");  
                      }
                     
                     else if(respond.equals("7777"))
                     {
                         key = 1;
                         ports.clear();
                         while (true) {
                             String response = dis.readUTF();
                             if (response.equals("7779")) {
                                 key =0;
                                 break;
                             } else {
                                 ports.add(response);
                             }

                         }
                     }
                    else
                        chatTextArea.append(respond);
                }
            }
            catch(Exception ex) 
            {
                chatTextArea.append("Connection Error!  \n");
            }
        }
    }
    
    
    
        public class P2P extends JFrame {
        private JTextField userText;
        private JTextArea chatWindow;
        private ObjectInputStream input;
        private ObjectOutputStream output;
        private Socket connection;
        private Thread thread;
        
        public P2P() throws IOException
        {
            super("Server");
            userText = new JTextField();
            userText.setEditable(false);         //Prevent Typing Message Until Anyone Connect
            userText.addActionListener(new ActionListener() 
            {
            @Override
            //This Method is invoked When We Press Enter
            public void actionPerformed(ActionEvent e) 
            {
               sendMessage(e.getActionCommand());
               userText.setText("");        //Empty Text Field After Sending a Message
            }
            });
            add(userText,BorderLayout.NORTH);

            chatWindow = new JTextArea();
            add(new JScrollPane(chatWindow));
            setSize(300,150);
        }
        
        public void run() {
            thread = new Thread(new Runnable() {
                @Override
                public void run() {
                    while (true) {
                        try {
                            waitForConnection();
                            input = new ObjectInputStream(connection.getInputStream());
                            output = new ObjectOutputStream(connection.getOutputStream());
                            whileChatting();
                        } catch (IOException ex) {
                            Logger.getLogger(ClientJFrame.class.getName()).log(Level.SEVERE, null, ex);
                        } finally {
                            closeConnection();
                        }
                    }

                }
            });
            thread.start();

        }
        
        public void waitForConnection() throws IOException
        {
            connection = sc.accept();
            setVisible(true);
        }
        
        private void whileChatting() throws IOException {
            String message = " You Are Now Connected!! ";
            sendMessage(message);
            ableToType(true);
            do {
                try {
                    message = (String) input.readObject();
                    showMessage("\n" + message);
                } catch (ClassNotFoundException e) {
                    showMessage("\nCan't Recognize Data From The Other Side");
                }
            } while (true);
        }
   
        private void closeConnection() {
            showMessage("\nClosing Connections..");
            ableToType(false);
            try {
                output.close();
                input.close();
                connection.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        
        private void sendMessage(String message)
        {
            try{
             output.writeUTF(username+": "+message);
             output.flush();
             showMessage("\n"+username+": "+message);
            }catch(IOException e){
             chatWindow.append("\nError in Sending This Message...");
             }
        }
        
        private void showMessage(final String text) {
            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    chatWindow.append(text);
                }
            });
        }
           
           
        private void ableToType(final boolean tof) {
            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    userText.setEditable(tof);
                }
            });
        }
        
    }
    
    
    
    public class P2PClient extends JFrame {

        private JTextField userText;
        private JTextArea chatWindow;
        private ObjectInputStream input;
        private ObjectOutputStream output;
        private Socket connection;
        private String IP;
        private int Port;
   
        public P2PClient(String host, int port) {
            super("Client");
            IP = host;
            Port = port;
            userText = new JTextField();
            userText.setEditable(false);         //Prevent Typing Message Until Anyone Connect
            userText.addActionListener(new ActionListener() {
                @Override
                //This Method is invoked When We Press Enter
                public void actionPerformed(ActionEvent e) {
                    sendMessage(e.getActionCommand());
                    userText.setText("");        //Empty Text Field After Sending a Message
                }
            });
            add(userText, BorderLayout.NORTH);

            chatWindow = new JTextArea();
            add(new JScrollPane(chatWindow));
            setSize(300, 150);
            setVisible(true);
        }

        public void startRunning() {
            try {
                while (true) {
                    try {
                        connectToServer();
                        setupStreams();
                        whileChatting();
                    } catch (EOFException e) {
                        showMessage("\nThe Connection is Ended..");
                    } finally {
                        closeConnection();
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        public void connectToServer() throws IOException {
            connection = new Socket(InetAddress.getByName(IP), Port);
            showMessage("\nConnected To: " + connection.getInetAddress().getHostName());
        }

        private void setupStreams() throws IOException {
            output = new ObjectOutputStream(connection.getOutputStream());
            output.flush();
            input = new ObjectInputStream(connection.getInputStream());
        }

        private void whileChatting() throws IOException {
            String message = " You Are Now Connected!! ";
            sendMessage(message);
            ableToType(true);
            do {
                message = input.readUTF();
                showMessage("\n" + message);
            } while (!message.equals("CLIENT - END"));
        }

        private void closeConnection() {
            showMessage("\nClosing Connections..");
            ableToType(false);
            try {
                output.close();
                input.close();
                connection.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        private void sendMessage(String message) {
            try {
                output.writeObject(username+": " + message);
                output.flush();
                showMessage("\n"+username+": " + message);
            } catch (IOException e) {
                chatWindow.append("\nError in Sending This Message...");
            }
        }

        private void showMessage(final String text) {
            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    chatWindow.append(text);
                }
            });
        }

        private void ableToType(final boolean tof) {
            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    userText.setEditable(tof);
                }
            });
        }
    }
    
   
    public void ONLINE() {
        try {
            String users;
            onlineUsers.clear();
            while(true)
            {
                users = dis.readUTF();
                if(users.equalsIgnoreCase("1234"))
                    break;
                else
                    onlineUsers.add(users);                
            }
            onlineList.setListData(onlineUsers);
        }
        catch(Exception ex) 
        {
            chatTextArea.append("Online Users Error! \n");
        }
    }
    
    public void OFFLINE(){
        try {
            String users;
            offlineUsers.clear();
            while(true)
            {
                users = dis.readUTF();
                if(users.equalsIgnoreCase("4321"))
                    break;
                else if (users.equals("EMPTYOFF"))
                {
                    offlineUsers.clear();
                    OfflineList.setListData(offlineUsers);
                }
                else
                    offlineUsers.add(users);
            }
             OfflineList.setListData(offlineUsers);
        }
        catch(Exception ex) 
        {
            chatTextArea.append("Offline Users Error! \n");
        }
    }
    
    public void GROUP(){
        try {
            String groupname;
            Groups.clear();
            while(true)
            {
                groupname = dis.readUTF();
                if(groupname.equalsIgnoreCase("4231"))
                    break;
                else
                    Groups.add(groupname);
            }
            
            GroupsjList.setListData(Groups);
        }
        catch(Exception ex) 
        {
            chatTextArea.append("Created Groups Error! \n");
        }
        
    }
    
    public void Disconnecting (){
         try {
                isConnected = false;
               
                // changing buttons status
                offlineStatus.setText("You are Disconnected ");
                UsernameField.setEditable(true);
                onlineList.disable();
                OfflineList.disable();
                GroupsjList.disable();
                chatTextArea.disable();
                ChatGroup.setEnabled(false);
                sendButton.setEnabled(false);
                CreateGroupB.setEnabled(false);
                enroll.setEnabled(false);
                unEnroll.setEnabled(false);
                offline.setEnabled(false);
                EnterGroup.setEnabled(false);
                disconnectButton.setEnabled(false);
                UsernameField.setEditable(false);
                GroupNametField.setEditable(false);
                
            } catch (Exception ex) {
                chatTextArea.append("Couldn't Disconnect! \n");
            }
    }

    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        buttonGroup6 = new javax.swing.ButtonGroup();
        buttonGroup7 = new javax.swing.ButtonGroup();
        buttonGroup8 = new javax.swing.ButtonGroup();
        buttonGroup9 = new javax.swing.ButtonGroup();
        buttonGroup10 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        connectButton = new javax.swing.JButton();
        UsernameField = new javax.swing.JTextField();
        disconnectButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        chatTextArea = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        inputTextArea = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        sendButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        GroupNametField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        CreateGroupB = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        onlineList = new javax.swing.JList();
        enroll = new javax.swing.JButton();
        unEnroll = new javax.swing.JButton();
        offline = new javax.swing.JToggleButton();
        offlineStatus = new javax.swing.JLabel();
        ChatGroup = new javax.swing.JButton();
        EnterGroup = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        OfflineList = new javax.swing.JList<>();
        jScrollPane6 = new javax.swing.JScrollPane();
        GroupsjList = new javax.swing.JList<>();
        EnterNameB = new javax.swing.JButton();

        jButton1.setText("jButton1");

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Username");

        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        UsernameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UsernameFieldActionPerformed(evt);
            }
        });

        disconnectButton.setText("Disconnect");
        disconnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectButtonActionPerformed(evt);
            }
        });

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Online Users");

        chatTextArea.setEditable(false);
        chatTextArea.setColumns(20);
        chatTextArea.setLineWrap(true);
        chatTextArea.setRows(5);
        jScrollPane2.setViewportView(chatTextArea);

        inputTextArea.setColumns(20);
        inputTextArea.setRows(5);
        jScrollPane3.setViewportView(inputTextArea);

        sendButton.setText("SEND");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Add Group");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Offline Users");

        CreateGroupB.setText("Create Group");
        CreateGroupB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateGroupBActionPerformed(evt);
            }
        });

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Groups");

        onlineList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                onlineListMouseClicked(evt);
            }
        });
        jScrollPane8.setViewportView(onlineList);

        enroll.setText("Enroll");
        enroll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enrollActionPerformed(evt);
            }
        });

        unEnroll.setText("UnEnroll");
        unEnroll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unEnrollActionPerformed(evt);
            }
        });

        offline.setText("Offline");
        offline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                offlineActionPerformed(evt);
            }
        });

        ChatGroup.setText("Chat Group");
        ChatGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChatGroupActionPerformed(evt);
            }
        });

        EnterGroup.setText("EnterGroup");
        EnterGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnterGroupActionPerformed(evt);
            }
        });

        jScrollPane4.setViewportView(OfflineList);

        jScrollPane6.setViewportView(GroupsjList);

        EnterNameB.setText("Enter name");
        EnterNameB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnterNameBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ChatGroup, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(connectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(disconnectButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(UsernameField, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                            .addComponent(GroupNametField))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(CreateGroupB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(EnterNameB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(offline)
                            .addComponent(offlineStatus)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(enroll, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(EnterGroup, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(unEnroll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(16, 16, 16))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(UsernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(EnterNameB)
                        .addComponent(connectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(offline)
                                .addGap(18, 18, 18)
                                .addComponent(offlineStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(EnterGroup)
                                .addGap(33, 33, 33)
                                .addComponent(enroll)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(unEnroll))
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel4)
                                .addComponent(GroupNametField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(CreateGroupB))
                            .addComponent(disconnectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(ChatGroup, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(103, 103, 103)
                        .addComponent(sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        // TODO add your handling code here:

        try {
            client = new Socket(serverIP, Port);
            offlineStatus.setText("You are now Online");
            connectButton.setEnabled(false);
            EnterNameB.setEnabled(true);
            UsernameField.setEditable(true);
            GroupNametField.setEditable(true);
            chatTextArea.enable();

        } catch (Exception ex) {
            chatTextArea.append("Cannot Connect! Try Again. \n");
            UsernameField.setEditable(true);
        }
        ListenThread listener = new ListenThread();
        listener.start();
        try {
            P2P first = new P2P();
            first.run();
        } catch (IOException ex) {
            Logger.getLogger(ClientJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_connectButtonActionPerformed

    private void disconnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectButtonActionPerformed
        try {
            dos.writeUTF(username + ": Disconnected \n");
            Disconnecting();
            connectButton.setEnabled(true);
            dos.writeUTF("0000");//disconnect
           
            // clear the flag
        } catch (IOException ex) {
            Logger.getLogger(ClientJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_disconnectButtonActionPerformed

    private void UsernameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UsernameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_UsernameFieldActionPerformed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        // TODO add your handling code here:
        
        if ((inputTextArea.getText()).equals("")) {
            //inputTextArea.setText("");
            inputTextArea.requestFocus();
        } 
        else {
            try {
                String msg = username + ": " + inputTextArea.getText() + "\n";
                dos.writeUTF(msg);
            } catch (Exception ex) {
                chatTextArea.append("Message was not sent. \n");
            }
            inputTextArea.setText("");
            inputTextArea.requestFocus();
        }
    }//GEN-LAST:event_sendButtonActionPerformed

    private void CreateGroupBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateGroupBActionPerformed
        // TODO add your handling code here:
        String Groupname = GroupNametField.getText();
       // GroupsjList.add("s");
        
            try {
                Groups.add(Groupname);
                GroupNametField.setText("");
                int[] indices = onlineList.getSelectedIndices();
                dos.writeUTF("2222");//add group
                dos.writeUTF(Groupname);
                int Number = indices.length;
                dos.writeUTF(Integer.toString(Number));
                for(int index : indices)
                {
                    // sending names of the members 
                    String groupMember = onlineUsers.get(index);
                    dos.writeUTF(groupMember);
                  
                }
            } catch (Exception ex) {
                  chatTextArea.append("Error creating a new group. \n");
            }
        
        
    }//GEN-LAST:event_CreateGroupBActionPerformed

    private void enrollActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enrollActionPerformed
        // TODO add your handling code here
        try {
            int index = GroupsjList.getSelectedIndex();
            String ChatGroup = Groups.get(index);
            dos.writeUTF("3335");//for enroll
            dos.writeUTF(ChatGroup);
            dos.writeUTF(username);
            int ind= onlineUsers.indexOf(username);
            dos.writeUTF(Integer.toString(ind));
            chatTextArea.append("You are a member in the group now \n");
        } catch (IOException ex) {
            Logger.getLogger(ClientJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        enroll.setEnabled(false);
        unEnroll.setEnabled(true);
        ChatGroup.setEnabled(true);
    }//GEN-LAST:event_enrollActionPerformed

    private void unEnrollActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unEnrollActionPerformed
        // TODO add your handling code here:
        enroll.setEnabled(true);
        unEnroll.setEnabled(false);
        ChatGroup.setEnabled(false);
         try {
             int index = GroupsjList.getSelectedIndex();
             String ChatGroup = Groups.get(index);
             dos.writeUTF("3336"); // to unenroll 
             dos.writeUTF(ChatGroup);
             dos.writeUTF(username);
             chatTextArea.append("You are not a member in the group now \n");
        } catch (IOException ex) {
            Logger.getLogger(ClientJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
       // chatTextArea.append("You are not allowed to chat in this group \n");
        
    }//GEN-LAST:event_unEnrollActionPerformed
//   OFFLINE users can't send but can see 
    private void offlineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_offlineActionPerformed
        // TODO add your handling code here:
        if(offline.isSelected()){
            offlineStatus.setText("You are now Offline");
            try {
                dos.writeUTF("1113"); 
                // the client can't do any thing
                ChatGroup.setEnabled(false);
                sendButton.setEnabled(false);
                EnterGroup.setEnabled(false);
                CreateGroupB.setEnabled(false);
              //  dos.writeUTF(username);
            } catch (IOException ex) {
                Logger.getLogger(ClientJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
             offlineStatus.setText("You are now Online");
             try {
                dos.writeUTF("1112"); 
                // the client can send and create group and whatever
                ChatGroup.setEnabled(true);
                sendButton.setEnabled(true);
                EnterGroup.setEnabled(true);
                CreateGroupB.setEnabled(true);
               // dos.writeUTF(username);
            } catch (IOException ex) {
                Logger.getLogger(ClientJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_offlineActionPerformed

    private void ChatGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChatGroupActionPerformed
        // TODO add your handling code here:
         try {
                int index = GroupsjList.getSelectedIndex();
                String ChatGroup = Groups.get(index);
                dos.writeUTF("3332");//Chat group
                dos.writeUTF(ChatGroup);
                dos.writeUTF(username);
                String msg= inputTextArea.getText();
                inputTextArea.setText("");
                dos.writeUTF(msg);
                
            }
            catch (Exception ex) {
                chatTextArea.append("Error starting a chat with the group. \n");
            }
        
        
    }//GEN-LAST:event_ChatGroupActionPerformed

    private void EnterGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnterGroupActionPerformed
        // TODO add your handling code here:
        
            try {
                int index = GroupsjList.getSelectedIndex();
                String ChatGroup = Groups.get(index);
                dos.writeUTF("3333");
                dos.writeUTF(ChatGroup);
                dos.writeUTF(username);
                
            }
            catch (Exception ex) {
                chatTextArea.append("Error entering a group with the group. \n");
            }
            
    }//GEN-LAST:event_EnterGroupActionPerformed

    private void EnterNameBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnterNameBActionPerformed
           try {
               // protcol to check if the name is unique
            dos.writeUTF("5555");
            username = UsernameField.getText();
            dos.writeUTF(username);
        } catch (IOException iOException) {
            
        }
                
        
    }//GEN-LAST:event_EnterNameBActionPerformed

    private void onlineListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onlineListMouseClicked
        // TODO add your handling code here:

        JList list = (JList) evt.getSource();
        if (evt.getClickCount() == 2) {
            try {
                dos.writeUTF("7777");
            } catch (IOException ex) {
                Logger.getLogger(ClientJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            while(key==1);
            int index = list.locationToIndex(evt.getPoint());
            int port = Integer.parseInt(ports.get(index));
            final P2PClient p2p = new P2PClient("127.0.0.1", port);
            Thread T1 = new Thread(new Runnable() {
                @Override
                public void run() {
                    p2p.startRunning();
                }
            });
            T1.start();

        }

    }//GEN-LAST:event_onlineListMouseClicked


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientJFrame().setVisible(true);
            }
            
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ChatGroup;
    private javax.swing.JButton CreateGroupB;
    private javax.swing.JButton EnterGroup;
    private javax.swing.JButton EnterNameB;
    private javax.swing.JTextField GroupNametField;
    private javax.swing.JList<String> GroupsjList;
    private javax.swing.JList<String> OfflineList;
    private javax.swing.JTextField UsernameField;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup10;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.ButtonGroup buttonGroup6;
    private javax.swing.ButtonGroup buttonGroup7;
    private javax.swing.ButtonGroup buttonGroup8;
    private javax.swing.ButtonGroup buttonGroup9;
    private javax.swing.JTextArea chatTextArea;
    private javax.swing.JButton connectButton;
    private javax.swing.JButton disconnectButton;
    private javax.swing.JButton enroll;
    private javax.swing.JTextArea inputTextArea;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JToggleButton offline;
    private javax.swing.JLabel offlineStatus;
    private javax.swing.JList onlineList;
    private javax.swing.JButton sendButton;
    private javax.swing.JButton unEnroll;
    // End of variables declaration//GEN-END:variables
}
